version: 0.2
env:
  secrets-manager:
    LOGIN: prod/sonar:sonartoken
    HOST: prod/sonar:HOST
    Organization: prod/sonar:Organization
    Project: prod/sonar:Project
phases:
  install:
    runtime-versions:
      docker: 18
      java: corretto11
    commands:
      - echo Entered the install phase
      - apt-get update -y
  
  pre_build:
    commands:
      - apt-get install -y jq
      - wget https://apache.inspire.net.nz/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz
      - tar xzf apache-maven-3.8.1-bin.tar.gz
      - ln -s apache-maven-3.8.1 maven
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      - unzip ./sonar-scanner-cli-3.3.0.1492-linux.zip
      - export PATH=$PATH:/sonar-scanner-3.3.0.1492-linux/bin/
      - echo logging in to AWS ECR
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION) 
      - REPOSITORY_URI=663879462405.dkr.ecr.us-east-2.amazonaws.com/firstregister
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  
  build:
    commands:
      - echo Entered the Test phase
      - mvn compile
      - mvn sonar:sonar -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=$Project -Dsonar.organization=$Organization
      - sleep 5
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$Project >result.json
      - cat result.json
      - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
      - echo Build started on `date`
      - mvn clean install -DskipTests
      - echo Building the Docker image
      - echo Docker Build started on `date`
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  
  post_build:
    commands:
      - echo Entered the post_build phase
      - echo Build completed on `date`
      - echo Pushing the Docker image
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"eCommerce-0.0.1-SNAPSHOT","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files: imagedefinitions.json
cache:
  paths:
    - '/root/.m2/**/*'
